const User = require("../models/User");
const { localize } = require("../utils/localization");
const { reverseGeocode } = require("../utils/locationUtil");
const {
  addLike,
  resetDailyLikes,
  checkForNewMatch,
} = require("../services/userService");
const { showProfileForMatching, findMatches } = require("../utils/profileUtil");

async function handleMessage(msg, bot) {
  const chatId = msg.chat.id;
  let user = await User.findOne({ telegramId: chatId }).lean(false);

  if (!user) return;

  if (user.currentMessageRecipient || user.currentChatPartner) {
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    let recipient;
    if (user.currentMessageRecipient) {
      recipient = await User.findById(user.currentMessageRecipient);
      if (recipient) {
        await sendMessageToUser(user, recipient, msg.text, bot);
        // –û—á–∏—â–∞–µ–º currentMessageRecipient –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await User.findByIdAndUpdate(user._id, {
          $unset: { currentMessageRecipient: 1 },
          currentChatPartner: recipient._id,
        });
      } else {
        await bot.sendMessage(
          chatId,
          "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –Ω–∞–π–¥–µ–Ω."
        );
        await User.findByIdAndUpdate(user._id, {
          $unset: { currentMessageRecipient: 1 },
        });
      }
    } else if (user.currentChatPartner) {
      recipient = await User.findById(user.currentChatPartner);
      if (recipient) {
        await sendMessageToUser(user, recipient, msg.text, bot); // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendMessageToUser –¥–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤
      } else {
        await bot.sendMessage(
          chatId,
          "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–ø–∏—Å–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞."
        );
        await User.findByIdAndUpdate(user._id, {
          $unset: { currentChatPartner: 1 },
        });
      }
    }
  }

  if (
    msg.text &&
    !isNaN(Number(msg.text)) &&
    Number(msg.text) >= 17 &&
    !user.age
  ) {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
    user.age = Number(msg.text);
    await user.save();
    await bot.sendMessage(chatId, localize(user.language, "gender_question"), {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: localize(user.language, "female"),
              callback_data: "gender_female",
            },
          ],
          [
            {
              text: localize(user.language, "male"),
              callback_data: "gender_male",
            },
          ],
        ],
      },
    });
  } else if (msg.text && Number(msg.text) < 17 && !user.age) {
    await bot.sendMessage(chatId, localize(user.language, "age_too_young"));
  } else if (msg.text && user.gender && user.interestedIn && !user.name) {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏
    user.name = msg.text || user.firstName || msg.from.first_name || "User";
    await user.save();
    await bot.sendMessage(chatId, localize(user.language, "about_question"));
  } else if (msg.text && !user.about) {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ
    user.about = msg.text;
    await user.save();
    await bot.sendMessage(chatId, localize(user.language, "photo_request"));
  } else if (msg.photo && !user.photoUrl) {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ
    const photo = msg.photo[msg.photo.length - 1];
    user.photoUrl = photo.file_id;
    await user.save();
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    let profileText = `${localize(user.language, "profile_preview")}\n\n**${
      user.name
    }**\n${localize(user.language, "age")}: ${user.age}\n${localize(
      user.language,
      "location"
    )}: ${user.city}\n${localize(user.language, "about")}: ${
      user.about || localize(user.language, "not_provided")
    }`;
    try {
      await bot.sendPhoto(chatId, user.photoUrl, {
        caption: profileText,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: localize(user.language, "yes"),
                callback_data: "profile_approved",
              },
            ],
            [
              {
                text: localize(user.language, "no"),
                callback_data: "profile_edit",
              },
            ],
          ],
        },
      });
    } catch (error) {
      console.error("Failed to send photo:", error);
      await bot.sendMessage(
        chatId,
        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ:",
        { parse_mode: "Markdown" }
      );
      await bot.sendMessage(chatId, profileText, { parse_mode: "Markdown" });
    }
  } else if (msg.location && !user.location.coordinates[0]) {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    const city = await reverseGeocode(
      msg.location.latitude,
      msg.location.longitude
    );
    user.city = city;
    user.location = {
      type: "Point",
      coordinates: [msg.location.longitude, msg.location.latitude],
    };
    await user.save();
    await bot.sendMessage(chatId, localize(user.language, "name_question"));
  } else if (msg.text === "‚ù§Ô∏è") {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞
    await handleLike(chatId, user, bot);
  } else if (msg.text === "üëé") {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞
    await handleDislike(chatId, user, bot);
  } else if (msg.text === "‚õî") {
    await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–Ω–∫–µ—Ç–µ", callback_data: "return_to_profile" }],
          [{ text: "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "delete_profile" }],
        ],
      },
    });
  } else if (msg.text === "üíå") {
    const now = new Date();
    const startOfDay = new Date(
      now.getFullYear(),
      now.getMonth(),
      now.getDate()
    );
    const user = await User.findOne({ telegramId: chatId });

    if (!user.premium) {
      await bot.sendMessage(
        chatId,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –ª–∞–π–∫–∞–º —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π. –î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –∞–Ω–∫–µ—Ç—É –Ω–∞–∂–º–∏—Ç–µ /myprofile"
      );
    } else {
      if (!user.lastMessageDate || user.lastMessageDate < startOfDay) {
        await handlePremiumSendMessage(user, chatId, bot);
      } else {
        await bot.sendMessage(
          chatId,
          "–ò–∑–≤–∏–Ω–∏—Ç–µ. –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–π –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
        );
      }
    }
  } else if (msg.text && user.matches.length > 0) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç-—Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞—Ç—á
    // await handleChatMessage(msg, user, bot);
  }
}

async function handlePremiumSendMessage(user, chatId, bot) {
  const match = await findCurrentMatch(user); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –º—ã –∑–Ω–∞–µ–º, –∫–∞–∫–æ–π –º–∞—Ç—á —Å–µ–π—á–∞—Å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è
  if (match) {
    await bot.sendMessage(
      chatId,
      "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –ª–∞–π–∫–∞–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏. –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–î–ê", callback_data: "send_message_yes" }],
            [{ text: "–ù–ï–¢", callback_data: "send_message_no" }],
          ],
        },
      }
    );
  } else {
    await bot.sendMessage(
      chatId,
      "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."
    );
  }
}

async function findCurrentMatch(user) {
  // –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
  // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ matches –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
  return await User.findOne({
    _id: { $in: user.matches },
    _id: { $ne: user._id },
  }).sort({ registrationDate: -1 });
}

async function handleLike(chatId, user, bot) {
  const now = new Date();
  const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());

  if (!user.lastLikeDate || user.lastLikeDate < startOfDay) {
    await resetDailyLikes(user._id);
    user = await User.findOne({ telegramId: chatId });
  }

  const currentLimit = 10 + (user.additionalLikesUsed ? 5 : 0);

  if (user.premium && user.dailyLikesGiven >= 25) {
    await bot.sendMessage(
      chatId,
      "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ª–∞–π–∫–æ–≤. –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –≤–æ–∑—å–º–∏—Ç–µ –ø—Ä–µ–º–∏—É–º."
    );
    return;
  } else if (!user.premium && user.dailyLikesGiven >= currentLimit) {
    if (!user.additionalLikesUsed) {
      await bot.sendMessage(
        chatId,
        "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ª–∞–π–∫–æ–≤. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ò–ª–æ–Ω–∞ –ú–∞—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–∞–π–∫–æ–≤:",
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ X –ò–ª–æ–Ω–∞ –ú–∞—Å–∫–∞",
                  url: "https://x.com/elonmusk",
                },
              ],
            ],
          },
        }
      );

      await bot.sendMessage(
        chatId,
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∞–π–∫–∏:",
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∞–π–∫–∏",
                  callback_data: "activate_additional_likes",
                },
              ],
            ],
          },
        }
      );
      return;
    } else {
      await bot.sendMessage(
        chatId,
        "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ª–∞–π–∫–æ–≤. –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –≤–æ–∑—å–º–∏—Ç–µ –ø—Ä–µ–º–∏—É–º."
      );
      return;
    }
  }

  const matches = await findMatches(user);
  if (matches.length > 0) {
    const currentMatch = matches[0];
    await addLike(user._id, currentMatch._id);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π –º–∞—Ç—á
    const isNewMatch = await checkForNewMatch(user._id, currentMatch._id);
    if (isNewMatch) {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ
      await notifyMatch(user, currentMatch, bot);
    }
    await bot.sendMessage(
      chatId,
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∞–π–∫–Ω—É—Ç. –û—Å—Ç–∞–ª–æ—Å—å –ª–∞–π–∫–æ–≤: ${
        user.premium
          ? 25 - user.dailyLikesGiven - 1
          : currentLimit - user.dailyLikesGiven - 1
      }`,
      {
        reply_markup: {
          keyboard: [
            [{ text: "‚ù§Ô∏è" }, { text: "üëé" }, { text: "üíå" }, { text: "‚õî" }],
          ],
          resize_keyboard: true,
          one_time_keyboard: false,
        },
      }
    );
    matches.shift();
    if (matches.length > 0) {
      await showProfileForMatching(chatId, user, matches[0], bot);
    } else {
      await bot.sendMessage(
        chatId,
        "–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ."
      );
    }
  }
}

async function handleDislike(chatId, user, bot) {
  if (!user.dislikesGiven) user.dislikesGiven = [];
  const matches = await findMatches(user);
  if (matches.length > 0) {
    const currentMatch = matches[0];
    user.dislikesGiven.push(currentMatch._id.toString());
    await user.save();

    matches.shift();
    if (matches.length > 0) {
      await showProfileForMatching(chatId, user, matches[0], bot);
    } else {
      await bot.sendMessage(
        chatId,
        "–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ."
      );
    }
  }
}

// async function handleChatMessage(msg, user, bot) {
//   if (user.currentChatPartner) {
//     const chatPartner = await User.findById(user.currentChatPartner);
//     if (chatPartner) {
//       await bot.sendMessage(
//         chatPartner.telegramId,
//         `${user.name}: ${msg.text}`,
//         {
//           reply_markup: {
//             inline_keyboard: [
//               [
//                 {
//                   text: "–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ—Å–µ–¥—É",
//                   callback_data: `stop_conversation_${user._id}`,
//                 },
//               ],
//             ],
//           },
//         }
//       );
//       await bot.sendMessage(user.telegramId, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", {
//         reply_markup: {
//           inline_keyboard: [
//             [{ text: "–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ—Å–µ–¥—É", callback_data: "stop_conversation" }],
//           ],
//         },
//       });
//     } else {
//       await bot.sendMessage(
//         user.telegramId,
//         "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å –æ–±—â–∞—Ç—å—Å—è, –Ω–µ –Ω–∞–π–¥–µ–Ω."
//       );
//       await User.findByIdAndUpdate(user._id, {
//         $unset: { currentChatPartner: 1 },
//       });
//     }
//   } else {
//     // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –º–∞—Ç—á–µ–º
//     const lastMatch = user.matches[user.matches.length - 1];
//     if (lastMatch) {
//       const matchUser = await User.findById(lastMatch);
//       if (matchUser) {
//         // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–µ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
//         await bot.sendMessage(
//           user.telegramId,
//           `–ù–∞—á–∏–Ω–∞–µ—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å ${matchUser.name}.`
//         );
//         await bot.sendMessage(
//           matchUser.telegramId,
//           `–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å ${user.name}.`
//         );
//         // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º currentChatPartner
//         await User.findByIdAndUpdate(user._id, {
//           currentChatPartner: matchUser._id,
//         });
//         await User.findByIdAndUpdate(matchUser._id, {
//           currentChatPartner: user._id,
//         });
//         // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É
//         await bot.sendMessage(
//           matchUser.telegramId,
//           `${user.name}: ${msg.text}`
//         );
//       } else {
//         await bot.sendMessage(
//           user.telegramId,
//           "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏."
//         );
//       }
//     } else {
//       await bot.sendMessage(
//         user.telegramId,
//         "–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ —Å –ª–∞–π–∫–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–∞—Ç—á."
//       );
//     }
//   }
// }

async function notifyMatch(user, match, bot) {
  try {
    const matchKeyboard = {
      inline_keyboard: [
        [
          {
            text: "–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É",
            callback_data: `start_chat_${match._id}`,
          },
        ],
        [
          {
            text: "–ü—Ä–µ—Ä–≤–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É",
            callback_data: "stop_chat",
          },
        ],
      ],
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    await sendNotificationWithPhoto(
      user.telegramId,
      match,
      bot,
      matchKeyboard,
      `–£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á —Å ${match.name}!`
    );

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Ç—á—É –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    await sendNotificationWithPhoto(
      match.telegramId,
      user,
      bot,
      matchKeyboard,
      `–£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á —Å ${user.name}!`
    );

    await User.findByIdAndUpdate(user._id, {
      $addToSet: { availableChatPartners: match._id },
    });
    await User.findByIdAndUpdate(match._id, {
      $addToSet: { availableChatPartners: user._id },
    });
  } catch (error) {
    console.error("Error notifying match:", error);
  }
}

async function notifyMatch(user, match, bot) {
  try {
    const matchKeyboard = {
      inline_keyboard: [
        [
          {
            text: "–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É",
            callback_data: `start_chat_${match._id}`,
          },
        ],
        [
          {
            text: "–ü—Ä–µ—Ä–≤–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É",
            callback_data: "stop_chat",
          },
        ],
      ],
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    await sendNotificationWithPhoto(
      user.telegramId,
      match,
      bot,
      matchKeyboard,
      `–£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á —Å ${match.name}!`
    );

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Ç—á—É –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    await sendNotificationWithPhoto(
      match.telegramId,
      user,
      bot,
      matchKeyboard,
      `–£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á —Å ${user.name}!`
    );

    await User.findByIdAndUpdate(user._id, {
      $addToSet: { availableChatPartners: match._id },
    });
    await User.findByIdAndUpdate(match._id, {
      $addToSet: { availableChatPartners: user._id },
    });
  } catch (error) {
    console.error("Error notifying match:", error);
  }
}

async function sendMessageToUser(sender, recipient, messageText, bot) {
  try {
    const senderKeyboard = {
      inline_keyboard: [
        [{ text: "–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ—Å–µ–¥—É", callback_data: "stop_conversation" }],
      ],
    };
    const recipientKeyboard = {
      inline_keyboard: [
        [
          {
            text: "–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ—Å–µ–¥—É",
            callback_data: `stop_conversation_${sender._id}`,
          },
        ],
      ],
    };

    // –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    await sendNotificationWithPhoto(
      recipient.telegramId,
      sender,
      bot,
      recipientKeyboard,
      `–£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${sender.name}:\n${messageText}`
    );
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å
    await bot.sendMessage(sender.telegramId, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", {
      reply_markup: senderKeyboard,
    });
  } catch (error) {
    console.error("Error sending message to user:", error);
    await bot.sendMessage(
      sender.telegramId,
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

async function sendNotificationWithPhoto(
  chatId,
  profileUser,
  bot,
  keyboard,
  messageText
) {
  try {
    if (profileUser.photoUrl) {
      let photoToSend = profileUser.photoUrl;
      if (!profileUser.photoUrl.startsWith("http")) {
        photoToSend = profileUser.photoUrl;
      } else {
        const { getUpdatedPhotoUrl } = require("../utils/photoUtil");
        const updatedUrl = await getUpdatedPhotoUrl(profileUser.photoUrl, bot);
        photoToSend = updatedUrl || profileUser.photoUrl;
      }
      await bot.sendPhoto(chatId, photoToSend, {
        caption: messageText,
        reply_markup: keyboard,
      });
    } else {
      // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
      await bot.sendMessage(chatId, messageText, {
        reply_markup: keyboard,
      });
    }
  } catch (error) {
    console.error("Error sending notification with photo:", error);
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å —Ñ–æ—Ç–æ
    await bot.sendMessage(chatId, messageText, {
      reply_markup: keyboard,
    });
  }
}

module.exports = { handleMessage };
