const User = require("../models/User");
const { localize } = require("../utils/localization");
const Advertisement = require("../models/Advertisement");
const { reverseGeocode } = require("../utils/locationUtil");
const {
  addLike,
  resetDailyLikes,
  checkForNewMatch,
} = require("../services/userService");
const { showProfileForMatching, findMatches } = require("../utils/profileUtil");

async function handleMessage(msg, bot) {
  const chatId = msg.chat.id;
  let user = await User.findOne({ telegramId: chatId }).lean(false);

  if (!user) return;

  if (!user.viewCount) user.viewCount = 0;
  user.viewCount++;
  await user.save();

  if (msg.text === "/premium") {
    const premiumMessage = localize(user.language, "contact_admin_for_premium");
    await bot.sendMessage(chatId, `${premiumMessage} @datingadminacc`);
  }

  if (user.viewCount % 20 === 0) {
    const ad = await Advertisement.findOne({ active: true }).lean();
    if (ad) {
      if (ad.imageUrl) {
        await bot.sendPhoto(chatId, ad.imageUrl, {
          caption: `${ad.text}\n[–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É](${ad.link})`,
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [[{ text: "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É", url: ad.link }]],
          },
        });
      } else {
        await bot.sendMessage(
          chatId,
          `${ad.text}\n[–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É](${ad.link})`,
          {
            parse_mode: "Markdown",
            reply_markup: {
              inline_keyboard: [
                [{ text: "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É", url: ad.link }],
              ],
            },
          }
        );
      }
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã
      const delay = Math.floor(Math.random() * (7000 - 5000 + 1) + 5000); // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 5 –¥–æ 7 —Å–µ–∫—É–Ω–¥
      setTimeout(async () => {
        const matches = await findMatches(user);
        if (matches.length > 0) {
          await showProfileForMatching(chatId, user, matches[0], bot);
        } else {
          await bot.sendMessage(
            chatId,
            "–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ."
          );
        }
      }, delay);
      return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–∫–ª–∞–º–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞
    }
  }

  if (msg.text === "/complaint") {
    const currentMatches = await findMatches(user);
    if (currentMatches.length > 0) {
      const currentMatch = currentMatches[0]; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –º–∞—Ç—á - —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –ø—Ä–æ—Ñ–∏–ª—å
      await User.findByIdAndUpdate(currentMatch._id, { complained: true });
      await bot.sendMessage(
        chatId,
        "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –≤–∞—à–µ–π –∂–∞–ª–æ–±–æ–π."
      );

      // –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç—ã–π
      if (!user.dislikesGiven) user.dislikesGiven = [];
      user.dislikesGiven.push(currentMatch._id.toString());
      await user.save();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
      currentMatches.shift();
      if (currentMatches.length > 0) {
        await showProfileForMatching(chatId, user, currentMatches[0], bot);
      } else {
        await bot.sendMessage(
          chatId,
          "–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ."
        );
      }
    } else {
      await bot.sendMessage(
        chatId,
        "–≠—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –∞–Ω–∫–µ—Ç—ã."
      );
    }
  }

  // if (user.currentMessageRecipient || user.currentChatPartner) {
  //   // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  //   let recipient;
  //   if (user.currentMessageRecipient) {
  //     recipient = await User.findById(user.currentMessageRecipient);
  //     if (recipient) {
  //       await sendMessageToUser(user, recipient, msg.text, bot);
  //       // –û—á–∏—â–∞–µ–º currentMessageRecipient –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  //       await User.findByIdAndUpdate(user._id, {
  //         $unset: { currentMessageRecipient: 1 },
  //         currentChatPartner: recipient._id,
  //       });
  //       // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ sendMessageToUser
  //     } else {
  //       await bot.sendMessage(
  //         chatId,
  //         "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –Ω–∞–π–¥–µ–Ω."
  //       );
  //       await User.findByIdAndUpdate(user._id, {
  //         $unset: { currentMessageRecipient: 1 },
  //       });
  //     }
  //   } else if (user.currentChatPartner) {
  //     recipient = await User.findById(user.currentChatPartner);
  //     if (recipient) {
  //       // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  //       await sendMessageToUser(user, recipient, msg.text, bot); // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendMessageToUser –¥–ª—è –µ–¥–∏–Ω–æ–π —Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
  //     } else {
  //       await bot.sendMessage(
  //         chatId,
  //         "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–ø–∏—Å–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞."
  //       );
  //       await User.findByIdAndUpdate(user._id, {
  //         $unset: { currentChatPartner: 1 },
  //       });
  //     }
  //   }
  // }

  if (
    msg.text &&
    !isNaN(Number(msg.text)) &&
    Number(msg.text) >= 17 &&
    !user.age
  ) {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
    user.age = Number(msg.text);
    await user.save();
    await bot.sendMessage(chatId, localize(user.language, "gender_question"), {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: localize(user.language, "female"),
              callback_data: "gender_female",
            },
          ],
          [
            {
              text: localize(user.language, "male"),
              callback_data: "gender_male",
            },
          ],
        ],
      },
    });
  } else if (msg.text && Number(msg.text) < 17 && !user.age) {
    await bot.sendMessage(chatId, localize(user.language, "age_too_young"));
  } else if (msg.text && user.gender && user.interestedIn && !user.name) {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏
    user.name = msg.text || user.firstName || msg.from.first_name || "User";
    await user.save();
    await bot.sendMessage(chatId, localize(user.language, "about_question"));
  } else if (msg.text && !user.about) {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ
    user.about = msg.text;
    await user.save();
    await bot.sendMessage(chatId, localize(user.language, "photo_request"));
  } else if (msg.photo && !user.photoUrl) {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ
    const photo = msg.photo[msg.photo.length - 1];
    user.photoUrl = photo.file_id;
    await user.save();
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    let profileText = `${localize(user.language, "profile_preview")}\n\n**${
      user.name
    }**\n${localize(user.language, "age")}: ${user.age}\n${localize(
      user.language,
      "location"
    )}: ${user.city}\n${localize(user.language, "about")}: ${
      user.about || localize(user.language, "not_provided")
    }`;
    try {
      await bot.sendPhoto(chatId, user.photoUrl, {
        caption: profileText,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: localize(user.language, "yes"),
                callback_data: "profile_approved",
              },
            ],
            [
              {
                text: localize(user.language, "no"),
                callback_data: "profile_edit",
              },
            ],
          ],
        },
      });
    } catch (error) {
      console.error("Failed to send photo:", error);
      await bot.sendMessage(
        chatId,
        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ:",
        { parse_mode: "Markdown" }
      );
      await bot.sendMessage(chatId, profileText, { parse_mode: "Markdown" });
    }
  } else if (msg.location && !user.location.coordinates[0]) {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    const city = await reverseGeocode(
      msg.location.latitude,
      msg.location.longitude
    );
    user.city = city;
    user.location = {
      type: "Point",
      coordinates: [msg.location.longitude, msg.location.latitude],
    };
    await user.save();
    await bot.sendMessage(chatId, localize(user.language, "name_question"));
  } else if (msg.text === "‚ù§Ô∏è") {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞
    await handleLike(chatId, user, bot);
  } else if (msg.text === "üëé") {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞
    await handleDislike(chatId, user, bot);
  } else if (msg.text === "‚õî") {
    await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–Ω–∫–µ—Ç–µ", callback_data: "return_to_profile" }],
          [{ text: "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "delete_profile" }],
        ],
      },
    });
  } else if (msg.text === "üíå") {
    const now = new Date();
    const startOfDay = new Date(
      now.getFullYear(),
      now.getMonth(),
      now.getDate()
    );
    const user = await User.findOne({ telegramId: chatId });

    if (!user.premium) {
      await bot.sendMessage(
        chatId,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –ª–∞–π–∫–∞–º —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π. –î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –∞–Ω–∫–µ—Ç—É –Ω–∞–∂–º–∏—Ç–µ /myprofile"
      );
    } else {
      if (!user.lastMessageDate || user.lastMessageDate < startOfDay) {
        await handlePremiumSendMessage(user, chatId, bot);
      } else {
        await bot.sendMessage(
          chatId,
          "–ò–∑–≤–∏–Ω–∏—Ç–µ. –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–π –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
        );
      }
    }
  } else if (msg.text && user.matches.length > 0) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç-—Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞—Ç—á
    // await handleChatMessage(msg, user, bot);
  }
}

async function handlePremiumSendMessage(user, chatId, bot) {
  const now = new Date();
  const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());

  if (!user.lastMessageDate || user.lastMessageDate < startOfDay) {
    const match = await findCurrentMatch(user);
    if (match) {
      const confirmKeyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–î–ê", callback_data: "send_message_yes" }],
            [{ text: "–ù–ï–¢", callback_data: "send_message_no" }],
          ],
        },
      };
      await bot.sendMessage(
        chatId,
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –ª–∞–π–∫–∞–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏. –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?",
        confirmKeyboard
      );
    } else {
      await bot.sendMessage(
        chatId,
        "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."
      );
    }
  } else {
    await bot.sendMessage(
      chatId,
      "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É—Å–ª—É–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏."
    );
  }
}

async function findCurrentMatch(user) {
  // –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
  // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ matches –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
  return await User.findOne({
    _id: { $in: user.matches },
    _id: { $ne: user._id },
  }).sort({ registrationDate: -1 });
}

async function handleLike(chatId, user, bot) {
  const now = new Date();
  const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());

  if (!user.lastLikeDate || user.lastLikeDate < startOfDay) {
    await resetDailyLikes(user._id);
    user = await User.findOne({ telegramId: chatId });
  }

  const currentLimit = 10 + (user.additionalLikesUsed ? 5 : 0);

  if (user.premium && user.dailyLikesGiven >= 25) {
    await bot.sendMessage(
      chatId,
      "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ª–∞–π–∫–æ–≤. –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –≤–æ–∑—å–º–∏—Ç–µ –ø—Ä–µ–º–∏—É–º."
    );
    return;
  } else if (!user.premium && user.dailyLikesGiven >= currentLimit) {
    if (!user.additionalLikesUsed) {
      const firstMessage = await bot.sendMessage(
        chatId,
        "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ª–∞–π–∫–æ–≤. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ò–ª–æ–Ω–∞ –ú–∞—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–∞–π–∫–æ–≤:",
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ X –ò–ª–æ–Ω–∞ –ú–∞—Å–∫–∞",
                  url: "https://x.com/elonmusk",
                },
              ],
            ],
          },
        }
      );

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º `message_id` –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setTimeout(async () => {
        try {
          await bot.editMessageText(
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∞–π–∫–∏:",
            {
              chat_id: chatId,
              message_id: firstMessage.message_id,
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∞–π–∫–∏",
                      callback_data: "activate_additional_likes",
                    },
                  ],
                ],
              },
            }
          );
        } catch (error) {
          console.error("Error editing message:", error);
          // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await bot.sendMessage(
            chatId,
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∞–π–∫–∏:",
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∞–π–∫–∏",
                      callback_data: "activate_additional_likes",
                    },
                  ],
                ],
              },
            }
          );
        }
      }, 10000);
      return;
    } else {
      await bot.sendMessage(
        chatId,
        "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ª–∞–π–∫–æ–≤. –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –≤–æ–∑—å–º–∏—Ç–µ –ø—Ä–µ–º–∏—É–º."
      );
      return;
    }
  }

  const matches = await findMatches(user);
  if (matches.length > 0) {
    const currentMatch = matches[0];
    await addLike(user._id, currentMatch._id);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π –º–∞—Ç—á
    const isNewMatch = await checkForNewMatch(user._id, currentMatch._id);
    if (isNewMatch) {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ
      await notifyMatch(user, currentMatch, bot);
      await new Promise((resolve) => setTimeout(resolve, 10000));
    }
    await bot.sendMessage(
      chatId,
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∞–π–∫–Ω—É—Ç. –û—Å—Ç–∞–ª–æ—Å—å –ª–∞–π–∫–æ–≤: ${
        user.premium
          ? 25 - user.dailyLikesGiven - 1
          : currentLimit - user.dailyLikesGiven - 1
      }`,
      {
        reply_markup: {
          keyboard: [
            [{ text: "‚ù§Ô∏è" }, { text: "üëé" }, { text: "üíå" }, { text: "‚õî" }],
          ],
          resize_keyboard: true,
          one_time_keyboard: false,
        },
      }
    );
    matches.shift();
    if (matches.length > 0) {
      await showProfileForMatching(chatId, user, matches[0], bot);
    } else {
      await bot.sendMessage(
        chatId,
        "–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ."
      );
    }
  }
}

async function handleDislike(chatId, user, bot) {
  if (!user.dislikesGiven) user.dislikesGiven = [];
  const matches = await findMatches(user);
  if (matches.length > 0) {
    const currentMatch = matches[0];
    user.dislikesGiven.push(currentMatch._id.toString());
    await user.save();

    matches.shift();
    if (matches.length > 0) {
      await showProfileForMatching(chatId, user, matches[0], bot);
    } else {
      await bot.sendMessage(
        chatId,
        "–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ."
      );
    }
  }
}

async function sendMatchNotification(user, match, bot) {
  try {
    const chatButton = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–ù–∞—á–∞—Ç—å —á–∞—Ç",
              url: `tg://user?id=${match.telegramId}`,
            },
          ],
        ],
      },
    };
    const message = `–ù–æ–≤—ã–π –º–∞—Ç—á —Å ${match.name}! –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞:`;
    await bot.sendPhoto(user.telegramId, match.photoUrl || "no_photo.png", {
      caption: message,
      ...chatButton,
    });
  } catch (error) {
    console.error("Error sending match notification:", error);
    await bot.sendMessage(
      user.telegramId,
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ —Å ${match.name}.`
    );
  }
}

async function notifyMatch(user, match, bot) {
  try {
    await sendMatchNotification(user, match, bot);
    await sendMatchNotification(match, user, bot);
  } catch (error) {
    console.error("Error in notifyMatch:", error);
  }
}

module.exports = { handleMessage };
