const User = require("../models/User");
const { localize } = require("../utils/localization");
const { showProfileForMatching, findMatches } = require("../utils/profileUtil");
const commandHandlers = require("./commandHandlers");

async function handleCallbackQuery(query, bot) {
  const chatId = query.message.chat.id;
  let user = await User.findOne({ telegramId: chatId });

  switch (query.data) {
    case query.data === "stop_conversation":
    case query.data.startsWith("stop_conversation_"):
      await handleStopConversation(
        user,
        query.data.split("_")[2] || null,
        chatId,
        bot
      );
      break;
    case "send_message_yes":
      await handleSendMessageConfirmation(user, chatId, bot);
      break;
    case "send_message_no":
      await commandHandlers.handleMyProfile({ chat: { id: chatId } }, bot);
      break;
    case "return_to_profile":
      await commandHandlers.handleMyProfile({ chat: { id: chatId } }, bot);
      break;
    case "delete_profile":
      await handleDeleteProfileConfirmation(chatId, bot);
      break;
    case "confirm_delete":
      await handleProfileDeletion(chatId, user, bot);
      break;
    case "cancel_delete":
      await commandHandlers.handleMyProfile({ chat: { id: chatId } }, bot);
      break;
    case "activate_additional_likes":
      await handleActivateAdditionalLikes(user, chatId, query, bot);
      break;
    case "profile_approved":
      await handleProfileApproved(user, chatId, bot);
      break;
    case "profile_edit":
      await handleProfileEdit(user, chatId, bot);
      break;
    case "stop_chat":
      await handleStopChat(chatId, user, bot);
      break;
    default:
      if (query.data.startsWith("stop_conversation_")) {
        const otherUserId = query.data.split("_")[2];
        await handleStopConversation(user, otherUserId, chatId, bot);
      } else if (query.data.startsWith("start_chat_")) {
        await handleStartChat(user, query.data.split("_")[2], bot);
      } else {
        await handleDefaultCallback(user, chatId, query, bot);
      }
  }
  bot.answerCallbackQuery(query.id);
}

async function findCurrentMatch(user) {
  const matches = await findMatches(user);
  if (matches.length > 0) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    return matches[0];
  }
  return null;
}

async function handleDeleteProfileConfirmation(chatId, bot) {
  await bot.sendMessage(chatId, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–î–ê", callback_data: "confirm_delete" }],
        [{ text: "–ù–ï–¢", callback_data: "cancel_delete" }],
      ],
    },
  });
}

async function handleProfileDeletion(chatId, user, bot) {
  try {
    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await User.updateMany(
      {},
      {
        $pull: {
          likesReceived: user._id,
          matches: user._id,
          endedChats: user._id,
        },
      }
    );

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await User.findByIdAndDelete(user._id);

    await bot.sendMessage(
      chatId,
      "–ñ–∞–ª—å, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –Ω–∞—Å –ø–æ–∫–∏–Ω—É—Ç—å. –ï—Å–ª–∏ —Ä–µ—à–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ /start"
    );
  } catch (error) {
    console.error("Error deleting profile:", error);
    await bot.sendMessage(
      chatId,
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  }
}

async function handleActivateAdditionalLikes(user, chatId, query, bot) {
  if (
    !user.premium &&
    user.dailyLikesGiven === 10 &&
    !user.additionalLikesUsed
  ) {
    user.additionalLikesUsed = true;
    await user.save();
    bot.answerCallbackQuery(query.id, {
      text: `–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ 5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–∞–π–∫–æ–≤!`,
    });

    const matches = await findMatches(user);
    if (matches.length > 0) {
      await showProfileForMatching(chatId, user, matches[0], bot);
    } else {
      await bot.sendMessage(
        chatId,
        "–ü–æ–∫–∞ —á—Ç–æ –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ."
      );
    }
  } else {
    bot.answerCallbackQuery(query.id, {
      text: "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∞–π–∫–∏ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.",
    });
  }
}

async function handleProfileApproved(user, chatId, bot) {
  await bot.sendMessage(chatId, "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∞–Ω–∫–µ—Ç...", {
    reply_markup: {
      keyboard: [
        [{ text: "‚ù§Ô∏è" }, { text: "üëé" }, { text: "üíå" }, { text: "‚õî" }],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    },
  });

  const matches = await findMatches(user);
  if (matches.length > 0) {
    await showProfileForMatching(chatId, user, matches[0], bot);
  } else {
    await bot.sendMessage(
      chatId,
      "–ü–æ–∫–∞ —á—Ç–æ –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ."
    );
  }
}

async function handleProfileEdit(user, chatId, bot) {
  await bot.sendMessage(chatId, localize(user.language, "age_question"));

  user.age = undefined;
  user.gender = undefined;
  user.interestedIn = undefined;
  user.city = undefined;
  user.location = { type: "Point", coordinates: [0, 0] };
  user.name = undefined;
  user.about = undefined;
  user.photoUrl = undefined;
  await user.save();
}

async function handleStartChat(user, matchId, bot) {
  const match = await User.findById(matchId);

  if (
    !user.endedChats.includes(matchId) &&
    match &&
    user.availableChatPartners.includes(matchId)
  ) {
    await User.findByIdAndUpdate(user._id, {
      $pull: { availableChatPartners: matchId },
      currentChatPartner: match._id,
    });
    await User.findByIdAndUpdate(match._id, {
      $pull: { availableChatPartners: user._id },
      currentChatPartner: user._id,
    });

    await bot.sendMessage(
      user.telegramId,
      `–í—ã –Ω–∞—á–∞–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å ${match.name}.`
    );
    await bot.sendMessage(
      match.telegramId,
      `–í—ã –Ω–∞—á–∞–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å ${user.name}.`
    );
  } else {
    await bot.sendMessage(
      user.telegramId,
      "–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –±—ã–ª–∞ —Ä–∞–Ω–µ–µ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–ª–∏ –º–∞—Ç—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    );
  }
}

async function handleDefaultCallback(user, chatId, query, bot) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback_data
  if (["pl", "ru", "ua", "en"].includes(query.data)) {
    if (!user) {
      user = await User.create({
        telegramId: chatId,
        language: query.data,
        location: {
          type: "Point",
          coordinates: [0, 0],
        },
      });
    } else {
      user.language = query.data;
      await user.save();
    }
    await bot.sendMessage(
      chatId,
      `${localize(query.data, "welcome")}\n\n${localize(
        query.data,
        "privacy_policy"
      )}`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: localize(query.data, "agree"),
                callback_data: "agree_privacy",
              },
            ],
          ],
        },
      }
    );
  } else if (query.data === "agree_privacy") {
    await bot.sendMessage(chatId, localize(user.language, "age_question"));
  } else if (query.data === "gender_female" || query.data === "gender_male") {
    user.gender = query.data.split("_")[1];
    await user.save();
    await bot.sendMessage(chatId, localize(user.language, "looking_for"), {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: localize(user.language, "female"),
              callback_data: "interested_female",
            },
          ],
          [
            {
              text: localize(user.language, "male"),
              callback_data: "interested_male",
            },
          ],
          [
            {
              text: localize(user.language, "both"),
              callback_data: "interested_both",
            },
          ],
        ],
      },
    });
  } else if (query.data.startsWith("interested_")) {
    const interest = query.data.split("_")[1];
    user.interestedIn = [interest];
    if (query.data === "interested_both") {
      user.interestedIn = ["male", "female"];
    }
    await user.save();
    await bot.sendMessage(
      chatId,
      localize(user.language, "location_question"),
      {
        reply_markup: {
          keyboard: [
            [
              {
                text: localize(user.language, "share_location"),
                request_location: true,
              },
            ],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      }
    );
  } else if (query.data === "start_profile_creation") {
    await bot.sendMessage(chatId, localize("pl", "language_selection"), {
      reply_markup: {
        inline_keyboard: [
          [{ text: "Polski", callback_data: "pl" }],
          [{ text: "–†—É—Å—Å–∫–∏–π", callback_data: "ru" }],
          [{ text: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data: "ua" }],
          [{ text: "English", callback_data: "en" }],
        ],
      },
    });
  }
}

async function handleStopChat(chatId, user, bot) {
  if (user.currentChatPartner) {
    const chatPartner = await User.findById(user.currentChatPartner);
    if (chatPartner) {
      await bot.sendMessage(user.telegramId, "–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É.");
      await bot.sendMessage(
        chatPartner.telegramId,
        "–í–∞—à–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞."
      );

      await User.updateMany(
        { _id: { $in: [user._id, chatPartner._id] } },
        {
          $unset: { currentChatPartner: 1 },
          $addToSet: { endedChats: { $each: [user._id, chatPartner._id] } },
          $pull: {
            matches: { $each: [user._id, chatPartner._id] },
            availableChatPartners: { $each: [user._id, chatPartner._id] },
          },
        }
      );
    } else {
      await bot.sendMessage(
        chatId,
        "–û—à–∏–±–∫–∞: –ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ —á–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —É–∂–µ –ø—Ä–µ—Ä–≤–∞–Ω–∞."
      );
      await User.findByIdAndUpdate(user._id, {
        $unset: { currentChatPartner: 1 },
      });
    }
  } else {
    await bot.sendMessage(
      chatId,
      "–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è."
    );
  }
}

async function handleStopConversation(user, otherUserId, chatId, bot) {
  if (otherUserId) {
    const otherUser = await User.findById(otherUserId);
    if (otherUser) {
      await User.updateMany(
        { _id: { $in: [user._id, otherUserId] } },
        {
          $unset: { currentChatPartner: 1 },
          $addToSet: { endedChats: { $each: [user._id, otherUserId] } },
        }
      );
      await bot.sendMessage(user.telegramId, "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–µ—Å–µ–¥—É.");
      await bot.sendMessage(
        otherUser.telegramId,
        "–ë–µ—Å–µ–¥–∞ —Å –≤–∞–º–∏ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
      );
    } else {
      await bot.sendMessage(
        chatId,
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å –æ–±—â–∞—Ç—å—Å—è, –Ω–µ –Ω–∞–π–¥–µ–Ω."
      );
    }
  } else {
    if (user.currentChatPartner) {
      const chatPartner = await User.findById(user.currentChatPartner);
      if (chatPartner) {
        await User.updateMany(
          { _id: { $in: [user._id, chatPartner._id] } },
          {
            $unset: { currentChatPartner: 1 },
            $addToSet: { endedChats: { $each: [user._id, chatPartner._id] } },
          }
        );
        await bot.sendMessage(user.telegramId, "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–µ—Å–µ–¥—É.");
        await bot.sendMessage(
          chatPartner.telegramId,
          "–ë–µ—Å–µ–¥–∞ —Å –≤–∞–º–∏ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
        );
      } else {
        await bot.sendMessage(
          chatId,
          "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å –æ–±—â–∞—Ç—å—Å—è, –Ω–µ –Ω–∞–π–¥–µ–Ω."
        );
        await User.findByIdAndUpdate(user._id, {
          $unset: { currentChatPartner: 1 },
        });
      }
    } else {
      await bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –±–µ—Å–µ–¥—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.");
    }
  }
}

async function handleSendMessageConfirmation(user, chatId, bot) {
  const now = new Date();
  const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  if (!user.lastMessageDate || user.lastMessageDate < startOfDay) {
    await User.findByIdAndUpdate(user._id, { lastMessageDate: now });
    const match = await findCurrentMatch(user);
    if (match) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–æ–∏—Ö –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ —á–∞—Ç—É
      await User.findByIdAndUpdate(user._id, {
        currentMessageRecipient: match._id,
        currentChatPartner: match._id,
      });
      await User.findByIdAndUpdate(match._id, {
        currentChatPartner: user._id,
      });
      await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:");
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      await bot.sendMessage(
        match.telegramId,
        `–£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.name}.`
      );
    } else {
      await bot.sendMessage(
        chatId,
        "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."
      );
    }
  } else {
    await bot.sendMessage(chatId, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Å–µ–≥–æ–¥–Ω—è.");
  }
}

module.exports = { handleCallbackQuery };
